package ivkhk.ee;

import java.util.Arrays; //импортирует класс Arrays,
// который содержит статические методы для работы с массивами (в данном случае для сортировки).

public class JPTV23Task5 { //класс йптв доступен для всех

    public static void main(String[] args) { //начало программы
        int[][] jaggedArray  = new int[5][]; // создание рваного массива с 5 строками, каждая из которых будет инициализирована позже.
//jaggedarray имя переменной //[][] это рваный массив //int[5] означает, что мы создаем массив, который будет содержать 5 элементов, но конкретные размеры этих элементов (внутренних массивов) мы пока не определяем (поэтому после запятой оставлено пустое место []).
        for (int i = 0; i < jaggedArray.length; i++) {  //цикл, который проходит по всем строкам массива jaggedArray. //for используется для повторения блока кода несколько раз.
            //Цикл будет выполняться до тех пор, пока i меньше, чем длина jaggedArray. Как только i станет равным длине jaggedArray, условие станет ложным, и выполнение цикла завершится.
            //i++ увеличивает значение i на 1
            int rowLength = 3 + 2 * i; //вычисляет длину текущей строки. Длина увеличивается на 2 для каждой следующей строки (т.е. 3, 5, 7, 9, 11). //rowleigt imja
            jaggedArray[i] = new int[rowLength]; //создает новый массив с длиной rowLength и присваивает его текущей строке.

            for (int j = 0; j < rowLength; j++) { //цикл, который проходит по элементам текущей строки.
                //переменная j значение 0 //С помощью int мы указываем, что j будет переменной типа int (целое число).
                //j выполняется до того момента пока меньше rowLeight
                jaggedArray[i][j] = (int) (Math.random() * 51) + 50;
            }
        }

        System.out.println("Несортированный массив:"); //сообщает
        printJaggedArray(jaggedArray); //позволяет удобно и эффективно выводить содержимое рваного массива на экран


        for (int i = 0; i < jaggedArray.length; i++) { //цикл, i как счетчик, jaggedArray.length возвращает возвращает количество строк в рваном массиве jaggedArray
            Arrays.sort(jaggedArray[i]); //сортирует строку arrays позволяют выполнять различные операции, такие как сортировка, поиск и сравнение массивов.
            //jaggedArray[i] представляет собой конкретный внутренний массив (строку) рваного массива jaggedArray, который мы хотим отсортировать.
            //Индекс i используется для доступа к соответствующей строке рваного массива.
            // Например, если i равно 0, то мы обращаемся к первой строке, если i равно 1, то ко второй строке и так далее.
        }

        System.out.println("\nОтсортированный массив:"); //сообщает
        printJaggedArray(jaggedArray); //позволяет удобно и эффективно выводить содержимое рваного массива на экран
    }

    public static void printJaggedArray(int[][] arr) { //(int[][] arr): Это параметры метода. В данном случае метод принимает один параметр arr, который является рваным массивом (массив массивов) целых чисел.
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                System.out.print(arr[i][j] + " "); //выводит, Доступ к элементу в рваном массиве arr, который находится в строке с индексом i и столбце с индексом j.
                //Оно используется для получения значения элемента, чтобы, например, вывести его на экран или выполнить с ним какие-либо вычисления.
            }
            System.out.println(); //Эта строка используется для перехода на новую строку после завершения вывода всех элементов текущей строки.
        }
    }
}
